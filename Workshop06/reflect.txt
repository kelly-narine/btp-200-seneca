Concepts learned during the development of the application for this workshop includes file handing via the ifstream and ofstream from the fstream library, alongside defining and creating the copy-constructor, and copy-assignment operators (two of the three components in Rule-of-Three). The fstream library provided the ifstream and ofstream objects and their member functions to help read the data from the files (i.e. the load function in the Inbox module), and write data to a txt files via the save function in the Inbox module. It should be noted that the data written to the files was formatted via the overloaded << operator helper function from the email module. 

One benefit of directly calling the copy-assignment operator in the copy-constructor is the reduction in redundant code. This makes it easier to fix any potential bugs that could emerge in the code (will not require to fix code in as many places). Another benefit is that using the copy-assignment operator in the copy-constructor for copying includes a check for self-assignment. The self-assignment check is a necessary component in the copy-assignment operator as the resource memory of the resource being copied into the object will get lost as a result of deallocation of the resource to be copied into. With the self-assignment check, the state of the object to have resources be copied to will remain in its state to prevent odd behaviours. 

A challenge encountered while creating the copy-constructor for both the Email and Inbox module was with the calling of the copy-assignment operator. Despite the copy-assignment operator being implemented correctly, an error still occurred when the constructor was called in the main function as a result of the resource values (i.e. m_subject from the Email module and m_emails from the Inbox module). To resolve this issue, I initialized the resource values to nullptr in the copy-constructor prior to calling the copy-assignment operator to the current object. This measure ensured that the value of resource variable is safe, preventing garbage values from being collected, etc. 
