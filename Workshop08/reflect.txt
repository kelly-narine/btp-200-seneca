In this workshop, I have expanded my knowledge on Polymorphism, one of the main components of Object-Oriented Programming. To add more flexibility to the application, I have made use of an Abstract Class, also known as an Interface, in iAccount. iAccount qualifies as an interface because it contains pure virtual functions (i.e. credit, debit, monthEnd, display). Since the virtual part implies polymorphism, more flexibility was added to code, which enabled implementing the same functions in different ways. This has proven beneficial, particularly in the ChequingAccount and SavingsAccount concrete classes as they each had their own approach on how to handle certain fees, such as the monthEnd fee. 

A challenge that I came across in the process of completing the workshop was with the virtual iAccount destructor. Given that this class is an interface that was not required to have a destructor implementation created, it was challenging to configure a method to bypass the error of function definition not found in Visual Studio. To resolve this issue, I set the declaration of the destructor in iAccount to default. This allows the compiler to create the definition itself. 

Milestone 2 also contained virtual functions, which also provided benefits of similar nature, flexibility. This was useful for the read and write functions as they both fulfilled the same purpose of reading and writing, but had to read and write different things. 
