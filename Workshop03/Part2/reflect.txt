The main concepts that I have learnt in the process of working on this workshop are working with classes (definition, implementation, utilization of member functions such as queries and modifiers) and formatting the console's output. 

It is best practice to keep variables and data members of a class private where possible. This is due to it being a precautionary measure prevent a mishap of a client modifying data member type directly, which could cause bugs in the program. This is particularly beneficial with the handling of sensitive data members. However, it was a necessity to modify the values of the data members, for functionality purposes, from the IceCream class in the Vendor module so that the IceCream data can be added to the order. The set (modifier) function fulfilled the purpose of setting the IceCream data members values without directly accessing the actual members of themselves. To obtain their values, the query functions (i.e. getFlavour, getNumOfScoops, getVanillaWafer from the IceCream class). The concept of queries were also applied to functions such as getFlavourPrice, displayOrderReceipt, and the various calculate functions in order to access values of data members without actually changing their state / modifying them. The concept of modifiers was also applied to the addToOrder function as the state of the IceCream object and the array of IceCream objects (m_order member function in the Vendor class). 

In regards to the output of the application, which can be found in the displayOrderReceipt function, it should be noted that formatting the output in such a manner is beneficial for the readability of the user. A challenge that I came across in the process of creating this function was with the filling of the empty spaces. Despite setting the fill character to another character from the original, I was having difficulties with having it display in the output. To resolve this issue the original fill character had to be stored in a variable and then utilized at the end of the function to restore the original fill value (this process was to override the client set fill variable and to combat the side effects occurring with the multiple cout statements). To maintain the organization of the code, especially when it came to setting the precision of the prices, it was crucial to ensure that set and unset was utilized. This maintained the precision format for as long as it was necessary until it got unset so that the original client format can be set back. With keen attention to detail, the output correct output got displayed successfully. 
