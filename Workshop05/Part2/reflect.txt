The concepts learnt in the process of completing this workshop are Overloaded Operators and Helper Functions (only Free Helper Functions were used in this workshop). The types of operators used were Unary, Binary, alongside Type Conversion operators. Unary operators were used in the form of a Pre-Fix operator in the Hero module to increment the level of a Hero by one. Binary operators that were used can be found in the overloaded += operators that added an ability to the Hero’s array of type Ability or altered the level by the specified amount. They were also used in the Free Helper Functions that overloaded the insertion / extraction and comparison operators to add an Ability to a Hero or compare which of two Heroes have greater strength. 

Free Helper Functions are not marked as queries, despite not modifying anything, as they are not member functions of the class itself. In this particular scenario, the overloaded comparison operators are not a member function of the Hero class, but rather a global function instead (hence the name Free Helper). It should be noted, that despite being a global function, making use of the object of type Hero in the parameter, it still cannot access the private members of the Hero. 

A challenge encountered in the process of completing this workshop involved a memory leak that came from the overloaded += operator that added an ability to the Hero’s array of type Ability. It was a result of the tempAbility array not being de-allocated, as per Valgrind. This helped me realize that the tempAbilities array does not go out of scope, despite being a local variable of the member function, due to it being inside a member operator that overloads a function. To mitigate this issue, the tempAbility array had to be de-allocated after copying its contents to the Hero’s array of type Ability. 
 
