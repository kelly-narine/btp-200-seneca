In this workshop the concepts learnt involved managing resources in a derived class. In general, the process shares similarities with managing resources in classes that are not involved in a hierarchy. The main distinctions can be found in the Book module’s Rule-of-Three implementation. In the derived class Book’s copy-assignment operator, it is necessary to copy the contents from the Base class, LibraryItem, into Book as it is a derived class of LibraryItem. Force copying-assigning from base type helps achieve this alongside letting the LibraryItem know that Book is a type of LibraryItem.  It should be noted that without having this conversion and force copy-assignment, the LibraryItem copy assignment would not be called by default despite being a base class. This is because a custom copy-assignment operator was created in the Book class. Likewise will occur with the copy-constructor as well, but the destructor will be called regardless. A challenge encountered in the process of completing the workshop involved memory allocation. It was mishandled due to the length of the title parameter being used for allocating memory of Book’s author, rather than the author parameter (in the constructor). However, memory allocation was managed correctly upon allocating the sufficient amount of memory from the author. Another error that occurred was with the destructor being called in the LibraryItem class, as it was subject to deallocating prior to its derived Book class. To delay this process and ensure that the Book class was being deallocated in proper order, I made the LibraryItem class a virtual function (this allows late binding so that the Book destructor can called first, despite the LibraryItem deallocation taking place prior to the Book class' in the main). 

With milestone 3 of the project. The concepts utilized involved polymorphism, which provided more flexibility by allowing implement the read, write, and type functions to behave in different ways. It should be noted that since Patient is also an abstract class (as a pure virtual function is included), it cannot be instantiated. A challenge encountered in the process of creating the Patient module involved the read function. This was due to an inadequate use of ignore functions (in some cases the ignore functions were used, but didn’t specify the maximum number of characters to ignore) after putting data into each data member from the istream. To resolve this issue, more ignore functions were added with a specified maximum of 10000 characters to ignore. 
