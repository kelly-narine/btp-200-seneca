In the process of writing the program for this workshop, one of the biggest lessons learnt was how references work. The references were used in the loadData overloaded functions, displayRoomByType, display overloaded functions, findRoom, addGuest, and deallocate functions, from the Hotel Module. The parameters of these functions contain Hotel& theHotel, Room& theRoom, and Guest& theGuest as the reference variables (& denotes/identifies such variables). These are aliases of the actual objects themselves (just another name). The objects themselves have been created in the main method and have been passed to the parameters. This ensures that the data being manipulated and handled goes to the right address. 

On another note, function overloading is also another concept that has been applied. Alongside the load and display functions mentioned previously, the read functions from the File Module are also overloaded functions. These functions have the same identifier (name), but different parameters / return types. This has proven to be particularly useful with the read function as they have the same purpose of reading data, with the only differences being in the desired type to be returned (as shown in the loadData overloaded function when loading the data members' data of type char* and int - m_roomNumber and m_maxCntGuests for the Room object in Hotel Module). 

Initially at the start of the workshop, I was trying to pass parameters by address via use of Pointers. I came to realization that this is different from passing by reference as it would mean that thee address of itself will need to be specified in the parameter rather than just the object's name. Also, while creating the findRoom function in the Hotel Module, there was difficulty with the getting the correct result of the roomNumber match comparison. Originally I used the boolean logical operator == to determine if the the room number specified in the parameter matches with any room number in the array of type Room. After debugging I came to realize it consistently returned 0 instead of 1. This is due to the comaprison of two char* values with == comparing the address, rather than the value of itself. To overcome this issue I made use of the strcmmp built in function from the cstring library, which resulted in obtaining the desired results.

With the read function, which was overloaded multiple times in both parts of the workshop, an out parameter was received (the reference parameter). Out parameters modifies the data of the original object being referenced or pointed to, which then gets returned and utilized by its caller. In parameters such as the delim parameter in the read functions, fileName parameter in the openFile function (from the File Module), and roomNumber parameter in the findRoom function of the Hotel Module to name a few are function parameters that are used for the function alone. Any altercation of these parameters will not have direct effects on the object as they will not be used to modify it. 
