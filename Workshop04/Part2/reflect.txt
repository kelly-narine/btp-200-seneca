In this workshop, I made use of the Special Member Functions, Constructors and Destructors. The default constructor, from the Guitar class, demonstrates the benefit of constructors as it initializes the class data members. In other words, it puts the Guitar object to an empty state. The default Guitar constructor will avoid things such as undefined errors and code from breaking during the execution of the program due to inadequate data being assigned to the data members, etc. This has been proven beneficial upon the first Guitar created in the main function, which was set to nullptr, as the execution still ran smoothly despite having such a value set. Another part of the Guitar constructors to be noted is that they are overloaded. The overloaded constructors provides more options for client communication with the object data (via the main function). For example, in the default Guitar constructor, the client can either specify only the name of the Guitar model or nothing in the parameters. They also have the option of calling the other constructor where they specify the address of the GuitarString array, the number of GuitarString the Guitar has, alongside the name of the Guitar model. The Guitar destructor is also beneficial as it will clean up the resources that was used by the Guitar object before it completely gets destroyed. This helped mitigate any potential memory leaks by de-allocating the array of GuitarString and resetting the number of GuitarString back to zero. 

A challenge that was encountered in the process of creating the module involved an attempt to read from an invalid address. Through Valgrind, I was able to configure the problem area being in the Guitar deconstructor as the array of GuitarString was initially being de-allocated for every single object in the main function. This is not always needed as the array of  GuitarString  could possibly be de-allocated beforehand via the Guitarâ€™s deString function. To resolve this issue, I added an if condition that will allow the array of GuitarString to be de-allocated only if it contains any items in it. 
