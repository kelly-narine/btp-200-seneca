Throughout the development of the General Healthcare Facility Pre-Triage Application, I have leveraged the three components that make up object-oriented languages (Encapsulation, Inheritance, Polymorphism). Alongside these concepts I have also learnt more about other functionalities with the fstream and iostream libraries. Making use of these tools have enriched my understanding of C++ as they have exposed me to more of its capabilities. 

One of the core skills acquired during the development of this application is Polymorphism. The relation between the IOAble Interface, Patient abstract class, and the TestPatient and TriagePatient class has taught me how a general structure can offer so much flexibility amongst the derived classes of a class hierarchy. To ensure that the common functionalities that are passed on from the base class to the derived class from the base class have been done correctly, I made use of the keyword override. I have discovered the benefits of making use of it for reassurance purposes as I had doubts at times on whether a function had actually been overridden or created as a brand new function with no ties to the base class functionality. Another concept learnt was with functionality that allows to set the state of the input while reading user inputs entries and files. This has exposed me to so called error handling with user entries in particular, which required use of functions such as fail, setstate, and peek. 

Challenges encountered in the process of the application creation involved the use of iostream and fstream libraries when it came to reading from both files and the user inputs. This was due to making use of the insertion operator and get methods from iostream in a manner that resulted in unwanted content being left in the buffer. This was a significant challenge with creating the Time module and load function in milestone 5. To mitigate this issue I would have to clear the buffer using the ignore and clear method. This has proven effective as the correct input would get stored in their respective variables, and future entries were able to run smoothly. Making use of the peek function was also a useful function in resolving issues that caused extra requests for user inputs, when not needed, as it allowed me to read the desired character(s) without actually extracting it. With the load function in particular, reinitializing the variable also helped reset values in some cases, which has resulted in fixing the issue of incorrect values being read. 

All in all, this project has helped re-enforce, hence enhance my understanding of the other core concepts of encapsulation and inheritance as well through the creation of the Patient, TestPatient, and TriagePatient classes. My understanding of passing by reference and address was also consolidated through the Patient class as it was an abstract class. Overloaded operators were also incorporated and proven useful with reading, writing, and comparisons used especially in the PreTriage class. Also the brief use of the template function also expanded my knowledge on how Template functions can be leveraged. 
